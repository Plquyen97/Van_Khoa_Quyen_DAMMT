import socket
import threading

# --- C·∫•u h√¨nh Server ---
HOST = '192.168.100.44'
PORT = 56666

clients = []
nicknames = []
lock = threading.Lock()


# --- G·ª¨I DANH S√ÅCH NG∆Ø·ªúI D√ôNG ---
def send_user_list():
    """G·ª≠i danh s√°ch ng∆∞·ªùi d√πng online cho t·∫•t c·∫£ client."""
    with lock:
        user_string = ",".join(nicknames)
        for client in clients:
            try:
                client.send(f"#USERS:{user_string}".encode('utf-8'))
            except:
                remove_client(client)


# --- PH√ÅT TIN NH·∫ÆN ---
def broadcast(message, sender_client=None):
    """G·ª≠i tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ client (tr·ª´ ng∆∞·ªùi g·ª≠i n·∫øu c·∫ßn)."""
    with lock:
        for client in clients:
            if client != sender_client:
                try:
                    client.send(message.encode('utf-8'))
                except:
                    remove_client(client)


# --- G·ª¨I TIN NH·∫ÆN RI√äNG ---
def send_private_message(sender, recipient_name, message):
    """G·ª≠i tin nh·∫Øn ri√™ng ƒë·∫øn m·ªôt ng∆∞·ªùi c·ª• th·ªÉ."""
    with lock:
        if recipient_name in nicknames:
            index = nicknames.index(recipient_name)
            recipient_client = clients[index]
            try:
                recipient_client.send(f"#PRIVATE:{sender}:{message}".encode('utf-8'))
                print(f"[PM] {sender} ‚Üí {recipient_name}: {message}")
            except:
                remove_client(recipient_client)
        else:
            # N·∫øu ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i, b√°o l·ªói cho ng∆∞·ªùi g·ª≠i
            index = nicknames.index(sender)
            sender_client = clients[index]
            sender_client.send(f"SERVER: Ng∆∞·ªùi d√πng '{recipient_name}' kh√¥ng t·ªìn t·∫°i.".encode('utf-8'))


# --- X√ìA CLIENT ---
def remove_client(client):
    """X√≥a client kh·ªèi danh s√°ch v√† th√¥ng b√°o."""
    with lock:
        if client in clients:
            index = clients.index(client)
            nickname = nicknames[index]
            clients.pop(index)
            nicknames.pop(index)
            client.close()
            print(f"[{nickname}] ƒë√£ ng·∫Øt k·∫øt n·ªëi.")
            broadcast(f"SERVER: {nickname} ƒë√£ r·ªùi kh·ªèi ph√≤ng chat!")
            send_user_list()  # C·∫≠p nh·∫≠t danh s√°ch cho m·ªçi ng∆∞·ªùi


# --- X·ª¨ L√ù M·ªñI CLIENT ---
def handle_client(client):
    try:
        # 1. Nh·∫≠n t√™n
        client.send("NICK".encode('utf-8'))
        nickname = client.recv(1024).decode('utf-8')

        with lock:
            nicknames.append(nickname)
            clients.append(client)

        print(f"[{nickname}] ƒë√£ k·∫øt n·ªëi.")
        broadcast(f"SERVER: {nickname} ƒë√£ tham gia ph√≤ng chat!")
        send_user_list()

        # 2. Nh·∫≠n tin nh·∫Øn
        while True:
            message = client.recv(1024).decode('utf-8')
            if not message:
                break

            if message == "!DISCONNECT":
                break

            # Ki·ªÉm tra tin nh·∫Øn ri√™ng
            if message.startswith("@"):
                try:
                    recipient_name, private_msg = message[1:].split(" ", 1)
                    send_private_message(nickname, recipient_name, private_msg)
                except ValueError:
                    client.send("SERVER: C√∫ ph√°p tin nh·∫Øn ri√™ng kh√¥ng h·ª£p l·ªá. D√πng: @t√™n n·ªôi_dung".encode('utf-8'))
            else:
                broadcast(f"{nickname}: {message}", sender_client=client)

    except ConnectionResetError:
        print(f"L·ªói: {nickname} b·ªã ng·∫Øt k·∫øt n·ªëi ƒë·ªôt ng·ªôt.")
    except Exception as e:
        print(f"L·ªói t·ª´ {nickname}: {e}")
    finally:
        remove_client(client)


# --- CH·∫†Y SERVER ---
def start_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((HOST, PORT))
    server.listen()
    print(f"‚úÖ Server ƒëang l·∫Øng nghe tr√™n {HOST}:{PORT}...")

    while True:
        client, address = server.accept()
        print(f"üîó K·∫øt n·ªëi t·ª´ {address}")
        thread = threading.Thread(target=handle_client, args=(client,))
        thread.start()


if __name__ == "__main__":
    start_server()
